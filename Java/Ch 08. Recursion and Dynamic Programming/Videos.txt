Power Set/ Subsets:
https://www.youtube.com/watch?v=QaepFjOYz7c&list=PLzffTJx5aHaQM-twdYq0Flzmqfiv05u6c 

Permutations:
https://www.youtube.com/watch?v=foBqt8E94mI

Combinations:
https://www.youtube.com/watch?v=iLuYoPwAhmM&list=PLzffTJx5aHaQM-twdYq0Flzmqfiv05u6c&index=3

Longest Common Subsequence:
https://www.youtube.com/watch?v=YL3b3F7sJBM&list=PLzffTJx5aHaT-0K_b47KxScckZfDXAKF3&index=7

Longest Palindromic Subsequence:
https://www.youtube.com/watch?v=J7rqc7pbwkI&list=PLzffTJx5aHaT-0K_b47KxScckZfDXAKF3&index=6

0-1 Knapsack (Interviewbit):
https://www.youtube.com/watch?v=l4lsRYNS_ok&list=PLzffTJx5aHaT-0K_b47KxScckZfDXAKF3&index=20&t=38s

Coin Change 2 | Dynamic programming | Leetcode #518
https://www.youtube.com/watch?v=ruMqWViJ2_U

for (int i=1; i<T.length; i++) {
  for (int j=1; j<T[0].length; j++){ // amount+1 since its open range (excludes last) 
    if (coins[i-1] > j) { // i-1 as coin array has first coin is at 0 and we start i at 1
      T[i][j] = T[i-1][j]; // copy top value as we cant take this coin
    } else { 
      T[i][j] = T[i-1][j] + T[i][j - coins[i-1]] ;
      // Total ways = ways(amount w/o coin) + ways(amount with coin)
      // coins[i-1] because that is the current coin in consideration
    }       
  }
}
//print(T);
return T[coins.length][amount];


Best Time to Buy and Sell Stock (Leetcode 121)
Permitted to complete at most one transaction
Greedy
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
https://www.youtube.com/watch?v=d0PZQWyeGZI&list=PL4goA_f8zUhC4iifLgbXZchAW05Afpce-&index=27

for(int i=0;i<prices.length;i++){
  min = Math.min(min,prices[i]);
  maxProf = Math.max(maxProf,prices[i]-min);
}
return maxProf;


Best Time to Buy and Sell Stock II (Leetcode 122)
As many transactions as you like 
Greedy
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/
https://www.youtube.com/watch?v=yxKafYH5JMg&list=PL4goA_f8zUhC4iifLgbXZchAW05Afpce-&index=28

int p = 0;
for(int i=1;i<prices.length;i++){
  if(prices[i]>prices[i-1]){
    p = p+ prices[i]-prices[i-1]; 
  }
}
return p;

Best Time to Buy and Sell Stock III (Leetcode 123)
You may complete at most two transactions
https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/
https://www.youtube.com/watch?v=GFa9xlgZcEI


int b1 = Integer.MAX_VALUE;
int b2 = Integer.MAX_VALUE;
int p1 = 0 , p2 = 0;
for(int i=0;i<prices.length;i++){
  b1 = Math.min(b1,prices[i]);    
  p1 = Math.max(p1,prices[i]-b1);   
  b2 = Math.min(b2,prices[i]-p1);
  p2 = Math.max(p2,prices[i]-b2);
}  
return p2;


188. Best Time to Buy and Sell Stock IV
You may complete at most k transactions
https://www.youtube.com/watch?v=thGK0PjLemk


static public int maxProfit(int k, int[] prices) {
        if(k==0 || prices.length<2)return 0;
        if(k>prices.length/2)k = prices.length/2;//4
        int[] dp = new int[prices.length];

        int min = prices[0] , p = 0;
        for (int i=0;i<prices.length;i++){
            min = Math.min(prices[i],min);
            p = Math.max(prices[i]-min,p);
            dp[i] = p;
        }


        for(int i=2;i<=k;i++){
            int b2 = Integer.MAX_VALUE;
            int p2 = 0;
            for (int j=0;j<prices.length;j++){
                b2 = Math.min(b2,prices[j]-dp[j]);
                p2 = Math.max(p2,prices[j]-b2);
                dp[j] = p2;
            }
        }

        return findMax(dp);
    }

    static int findMax(int[] dp){
        int max = 0;
        for (int i=0;i<dp.length;i++){
            max = Math.max(dp[i],max);
        }
        return max;
    }
}


====================================================================================================
Question: Why in coin change problem we remain in same row while finding number of possible ways ?
Ans: https://youtu.be/ruMqWViJ2_U?t=553
(infinite supply available and we can include second time)

Question: Why in knapsack we consider previous row while excluding item ?
Ans: https://youtu.be/YRBON9sIZ2Y?t=1255
(we dont wanna include item second time)
